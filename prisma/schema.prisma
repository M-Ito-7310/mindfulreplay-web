// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String?  @unique
  displayName String?  @map("display_name")
  name        String?
  image       String?
  emailVerified DateTime? @map("email_verified")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // NextAuth.js relations
  accounts Account[]
  sessions Session[]

  // App relations
  videos Video[]
  memos  Memo[]
  tasks  Task[]
  tags   Tag[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Video {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  youtubeId    String    @map("youtube_id")
  youtubeUrl   String    @map("youtube_url")
  title        String
  description  String?   @db.Text
  thumbnailUrl String?   @map("thumbnail_url")
  duration     Int?      // seconds
  channelName  String?   @map("channel_name")
  publishedAt  DateTime? @map("published_at")
  themeId      String?   @map("theme_id")
  notes        String?   @db.Text
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  memos Memo[]

  @@index([userId])
  @@index([youtubeId])
  @@map("videos")
}

model Memo {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  videoId      String    @map("video_id")
  content      String    @db.Text
  timestampSec Int?      @map("timestamp_sec")
  memoType     MemoType? @default(INSIGHT) @map("memo_type")
  importance   Int?      @default(3) // 1-5
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  user  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video   @relation(fields: [videoId], references: [id], onDelete: Cascade)
  tasks Task[]
  tags  Tag[]   @relation("MemoTags")

  @@index([userId])
  @@index([videoId])
  @@index([timestampSec])
  @@map("memos")
}

model Task {
  id          String     @id @default(cuid())
  userId      String     @map("user_id")
  memoId      String?    @map("memo_id")
  title       String
  description String?    @db.Text
  status      TaskStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?  @map("due_date")
  completedAt DateTime?  @map("completed_at")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  memo Memo? @relation(fields: [memoId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([memoId])
  @@index([status])
  @@index([dueDate])
  @@map("tasks")
}

model Tag {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  name      String
  color     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  memos Memo[] @relation("MemoTags")

  @@unique([userId, name])
  @@index([userId])
  @@map("tags")
}

enum MemoType {
  INSIGHT
  ACTION
  QUESTION
  SUMMARY
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}